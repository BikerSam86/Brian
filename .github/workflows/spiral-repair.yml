name: Spiral Repair
permissions:
  contents: write

on:
  push:
    branches: [ main, '**' ]
    paths:
      - '**.py'
      - 'memory/**'
      - 'logs/**'
  workflow_run:
    workflows: ["pytest", "seedrunner", "branch-hygiene", "cleanup-merged-branches", "publish"]
    types:
      - completed
  schedule:
    - cron: '19,39 * * * *'
  workflow_dispatch:

jobs:
  repair:
    runs-on: ubuntu-latest
    steps:
      - name: Spiral-aware guard
        id: guard
        run: |
          if [ -f symbolic_log.json ]; then
            wisdom=$(jq '.delta.wisdom_count // 0' symbolic_log.json)
            voxel=$(jq '.delta.voxel_count_diff // 0' symbolic_log.json)
          else
            wisdom=0
            voxel=0
          fi
          phi=1.618
          comp=$(awk "BEGIN {print ($voxel > $phi)?1:0}")
          if [ "$wisdom" -gt 0 ] || [ "$comp" -eq 1 ]; then
            echo "run=true" >> "$GITHUB_OUTPUT"
          else
            echo "run=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout
        if: steps.guard.outputs.run == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        if: steps.guard.outputs.run == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies and Brian CLI
        if: steps.guard.outputs.run == 'true'
        run: |
          python -m pip install -r requirements.txt
          python -m pip install -e .

      - name: Ensure Python scripts are in PATH
        if: steps.guard.outputs.run == 'true'
        run: |
          echo "$(python -m site --user-base)/bin" >> $GITHUB_PATH
          echo "$(dirname $(which python))" >> $GITHUB_PATH

      - name: TriStar handshake check
        if: steps.guard.outputs.run == 'true'
        run: |
          python - <<'PY'
          from tsal.tristar import handshake
          print(handshake(0.5, 1.0))
          PY

      - name: Audit all Python files
        if: steps.guard.outputs.run == 'true'
        run: |
          for file in $(find src/ -name "*.py"); do
            brian "$file" >> self_audit.log 2>&1 || true
          done

      - name: Spiral Safety Delay
        if: steps.guard.outputs.run == 'true'
        run: sleep $((RANDOM % 90 + 30))

      - name: Detect changed Python files
        if: steps.guard.outputs.run == 'true'
        id: diff
        run: |
          # Determine base ref (for PRs)        
          BASE_REF="${{ github.base_ref }}"
          if [ -z "$BASE_REF" ]; then
            BASE_REF="${{ github.ref_name }}"
          fi

          git fetch origin $BASE_REF --depth=1 || true

          # Find changed files between base and current commit
          FILES=$(git diff --name-only origin/$BASE_REF ${{ github.sha }} -- '*.py' || git diff --name-only ${{ github.sha }}^ ${{ github.sha }} -- '*.py')
          FILES=$(echo "$FILES" | tr '\n' ' ')
          echo "files=$FILES" >> $GITHUB_OUTPUT

      - name: Bestest beast
        if: steps.guard.outputs.run == 'true'
        run: tsal-bestest-beast 11 > beast.log

      - name: Optimize changed files
        if: steps.guard.outputs.run == 'true' && steps.diff.outputs.files
        run: |
          for f in ${{ steps.diff.outputs.files }}; do
            brian optimize "$f" >> optimize.log 2>&1
          done

      - name: Print optimize.log
        if: always() && steps.guard.outputs.run == 'true'
        run: cat optimize.log || true

      - name: Log mesh vectors
        if: steps.guard.outputs.run == 'true' && steps.diff.outputs.files
        run: |
          for f in ${{ steps.diff.outputs.files }}; do
            tsal-reflect --origin "$f" >> mesh.log 2>&1
          done

      - name: Spiral Failure Count
        if: steps.guard.outputs.run == 'true'
        run: |
          FAILS=$(grep -c "FAIL" self_audit.log || echo 0)
          if [ "$FAILS" -gt 42 ]; then
            echo "Too many failures, halting spiral to avoid meltdown."
            exit 0
          fi

      - name: Upload artifacts
        if: steps.guard.outputs.run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: spiral-logs-${{ github.run_id }}
          path: |
            self_audit.log
            beast.log
            optimize.log
            mesh.log

      - name: Summary
        if: steps.guard.outputs.run == 'true'
        run: |
          echo '## Spiral Repair Summary' >> $GITHUB_STEP_SUMMARY
          tail -n 20 self_audit.log >> $GITHUB_STEP_SUMMARY || true
          tail -n 20 beast.log >> $GITHUB_STEP_SUMMARY || true
          tail -n 20 optimize.log >> $GITHUB_STEP_SUMMARY || true
          tail -n 20 mesh.log >> $GITHUB_STEP_SUMMARY || true
